{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\n\n// Funci칩n para formatear solo preguntas y respuestas en los datos\nconst formatQuestionsAndAnswers = data => {\n  if (typeof data !== 'object' || data === null) return data;\n  if (Array.isArray(data)) {\n    return data.map(formatQuestionsAndAnswers);\n  }\n  return Object.fromEntries(Object.entries(data).map(([key, value]) => {\n    const formattedKey = key.startsWith('question_') || key.startsWith('answer_') ? key.replace(/_/g, ' ').replace(/([a-zA-Z])_([a-zA-Z])/g, '$1침$2') : key;\n    return [formattedKey, formatQuestionsAndAnswers(value)];\n  }));\n};\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/projects`);\n  if (!response.ok) {\n    throw new Error('Error al obtener los proyectos');\n  }\n  return response.json();\n};\nexport const fetchSurveys = async projectId => {\n  const response = await fetch(`${API_BASE_URL}/projects/${projectId}/responses`);\n  if (!response.ok) {\n    throw new Error('Error al obtener las encuestas');\n  }\n  const data = await response.json();\n  return data.map(formatQuestionsAndAnswers);\n};","map":{"version":3,"names":["API_BASE_URL","formatQuestionsAndAnswers","data","Array","isArray","map","Object","fromEntries","entries","key","value","formattedKey","startsWith","replace","fetchProjects","response","fetch","ok","Error","json","fetchSurveys","projectId"],"sources":["C:/Users/gonza/Desktop/front-demo/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Funci칩n para formatear solo preguntas y respuestas en los datos\r\nconst formatQuestionsAndAnswers = (data) => {\r\n  if (typeof data !== 'object' || data === null) return data;\r\n\r\n  if (Array.isArray(data)) {\r\n    return data.map(formatQuestionsAndAnswers);\r\n  }\r\n\r\n  return Object.fromEntries(\r\n    Object.entries(data).map(([key, value]) => {\r\n      const formattedKey = key.startsWith('question_') || key.startsWith('answer_')\r\n        ? key.replace(/_/g, ' ').replace(/([a-zA-Z])_([a-zA-Z])/g, '$1침$2')\r\n        : key;\r\n      return [formattedKey, formatQuestionsAndAnswers(value)];\r\n    })\r\n  );\r\n};\r\n\r\nexport const fetchProjects = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/projects`);\r\n  if (!response.ok) {\r\n    throw new Error('Error al obtener los proyectos');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchSurveys = async (projectId) => {\r\n  const response = await fetch(`${API_BASE_URL}/projects/${projectId}/responses`);\r\n  if (!response.ok) {\r\n    throw new Error('Error al obtener las encuestas');\r\n  }\r\n  const data = await response.json();\r\n  return data.map(formatQuestionsAndAnswers);\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,yBAAyB,GAAIC,IAAI,IAAK;EAC1C,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE,OAAOA,IAAI;EAE1D,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IACvB,OAAOA,IAAI,CAACG,GAAG,CAACJ,yBAAyB,CAAC;EAC5C;EAEA,OAAOK,MAAM,CAACC,WAAW,CACvBD,MAAM,CAACE,OAAO,CAACN,IAAI,CAAC,CAACG,GAAG,CAAC,CAAC,CAACI,GAAG,EAAEC,KAAK,CAAC,KAAK;IACzC,MAAMC,YAAY,GAAGF,GAAG,CAACG,UAAU,CAAC,WAAW,CAAC,IAAIH,GAAG,CAACG,UAAU,CAAC,SAAS,CAAC,GACzEH,GAAG,CAACI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,wBAAwB,EAAE,OAAO,CAAC,GACjEJ,GAAG;IACP,OAAO,CAACE,YAAY,EAAEV,yBAAyB,CAACS,KAAK,CAAC,CAAC;EACzD,CAAC,CACH,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,YAAY,WAAW,CAAC;EACxD,IAAI,CAACe,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,YAAY,aAAaqB,SAAS,YAAY,CAAC;EAC/E,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;EACA,MAAMhB,IAAI,GAAG,MAAMa,QAAQ,CAACI,IAAI,CAAC,CAAC;EAClC,OAAOjB,IAAI,CAACG,GAAG,CAACJ,yBAAyB,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}