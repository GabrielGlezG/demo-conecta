{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonza\\\\OneDrive\\\\Escritorio\\\\front_kobo\\\\src\\\\Components\\\\ShowProjects.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ProjectList from './ProjectList';\nimport SurveyList from './SurveyList';\nimport { formatFieldName } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [surveys, setSurveys] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Cargar proyectos\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n  const fetchProjects = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('http://localhost:5000/api/projects');\n      if (!response.ok) {\n        throw new Error('Error al obtener los proyectos');\n      }\n      const data = await response.json();\n\n      // Filtra proyectos que tengan nombre y descripción\n      const filteredProjects = data.filter(project => {\n        var _project$settings;\n        return project.name && ((_project$settings = project.settings) === null || _project$settings === void 0 ? void 0 : _project$settings.description);\n      });\n      setProjects(filteredProjects);\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  // Cargar encuestas de un proyecto\n  const fetchSurveys = async projectId => {\n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:5000/api/projects/${projectId}/responses`);\n      if (!response.ok) {\n        throw new Error('Error al obtener las encuestas');\n      }\n      const data = await response.json();\n      setSurveys(data);\n      setSelectedProject(projectId);\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchProjects,\n        children: \"Reintentar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Proyectos de KoboToolbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), !selectedProject ? /*#__PURE__*/_jsxDEV(ProjectList, {\n      projects: projects,\n      onProjectSelect: fetchSurveys\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SurveyList, {\n      surveys: surveys,\n      onBack: () => setSelectedProject(null),\n      formatFieldName: formatFieldName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"9BHCdb320CwJG2Mt6dDONSXsPwc=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","ProjectList","SurveyList","formatFieldName","jsxDEV","_jsxDEV","Projects","_s","projects","setProjects","selectedProject","setSelectedProject","surveys","setSurveys","loading","setLoading","error","setError","fetchProjects","response","fetch","ok","Error","data","json","filteredProjects","filter","project","_project$settings","name","settings","description","err","message","fetchSurveys","projectId","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","onProjectSelect","onBack","_c","$RefreshReg$"],"sources":["C:/Users/gonza/OneDrive/Escritorio/front_kobo/src/Components/ShowProjects.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ProjectList from './ProjectList';\r\nimport SurveyList from './SurveyList';\r\nimport { formatFieldName } from './utils';\r\n\r\nconst Projects = () => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [surveys, setSurveys] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Cargar proyectos\r\n  useEffect(() => {\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const fetchProjects = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('http://localhost:5000/api/projects');\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener los proyectos');\r\n      }\r\n      const data = await response.json();\r\n\r\n      // Filtra proyectos que tengan nombre y descripción\r\n      const filteredProjects = data.filter(\r\n        (project) => project.name && project.settings?.description\r\n      );\r\n\r\n      setProjects(filteredProjects);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Cargar encuestas de un proyecto\r\n  const fetchSurveys = async (projectId) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`http://localhost:5000/api/projects/${projectId}/responses`);\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener las encuestas');\r\n      }\r\n      const data = await response.json();\r\n      setSurveys(data);\r\n      setSelectedProject(projectId);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Cargando...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div>\r\n        <p>Error: {error}</p>\r\n        <button onClick={fetchProjects}>Reintentar</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h1>Proyectos de KoboToolbox</h1>\r\n\r\n      {!selectedProject ? (\r\n        <ProjectList projects={projects} onProjectSelect={fetchSurveys} />\r\n      ) : (\r\n        <SurveyList\r\n          surveys={surveys}\r\n          onBack={() => setSelectedProject(null)}\r\n          formatFieldName={formatFieldName}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,eAAe,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdkB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAClE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,gBAAgB,GAAGF,IAAI,CAACG,MAAM,CACjCC,OAAO;QAAA,IAAAC,iBAAA;QAAA,OAAKD,OAAO,CAACE,IAAI,MAAAD,iBAAA,GAAID,OAAO,CAACG,QAAQ,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,WAAW;MAAA,CAC5D,CAAC;MAEDtB,WAAW,CAACgB,gBAAgB,CAAC;MAC7BV,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrBlB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMmB,YAAY,GAAG,MAAOC,SAAS,IAAK;IACxC,IAAI;MACFpB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCe,SAAS,YAAY,CAAC;MACzF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCX,UAAU,CAACU,IAAI,CAAC;MAChBZ,kBAAkB,CAACwB,SAAS,CAAC;MAC7BpB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrBlB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,IAAID,OAAO,EAAE;IACX,oBAAOT,OAAA;MAAA+B,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/B;EAEA,IAAIxB,KAAK,EAAE;IACT,oBACEX,OAAA;MAAA+B,QAAA,gBACE/B,OAAA;QAAA+B,QAAA,GAAG,SAAO,EAACpB,KAAK;MAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBnC,OAAA;QAAQoC,OAAO,EAAEvB,aAAc;QAAAkB,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAEV;EAEA,oBACEnC,OAAA;IAAKqC,SAAS,EAAC,gBAAgB;IAAAN,QAAA,gBAC7B/B,OAAA;MAAA+B,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEhC,CAAC9B,eAAe,gBACfL,OAAA,CAACJ,WAAW;MAACO,QAAQ,EAAEA,QAAS;MAACmC,eAAe,EAAET;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAElEnC,OAAA,CAACH,UAAU;MACTU,OAAO,EAAEA,OAAQ;MACjBgC,MAAM,EAAEA,CAAA,KAAMjC,kBAAkB,CAAC,IAAI,CAAE;MACvCR,eAAe,EAAEA;IAAgB;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CAhFID,QAAQ;AAAAuC,EAAA,GAARvC,QAAQ;AAkFd,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}